worker_processes 1;			#nginx worker 数量
error_log logs/error.log;	#指定错误日志文件路径
events{
	worker_connections 104;
}
http {
	lua_package_path "/vagrant/openresty-demo/lua/?.lua;;";
	lua_package_cpath "/vagrant/openresty-demo/libs/?.so;;";
	server {
		#监听端口，若你的6699端口已被占用，则需要修改
		listen 6699;
		server_name localhost;
		lua_code_cache off;
		lua_need_request_body on;

		location /ticket {
			content_by_lua_file lua/route.lua;
		}
		# 验票
		location /V_GATEWAY_CHECK {
			internal;
			content_by_lua_file lua/checkticket.lua;
		}
		# 过闸
		location /V_GATEWAY_CONFIRM {
			internal;
			content_by_lua_file lua/pass.lua;
		}



		# 测试使用
		location / {
			default_type text/html;
			index index.html,index.htm;
			#content_by_lua_block {
			#	ngx.say("Hello World!")
			#}
		}

		location /finder {
			content_by_lua_file lua/finder.lua;
		}

		location /sum {
			#只允许内部调用
			internal;
			content_by_lua_block {
				local args = ngx.req.get_uri_args()
				ngx.say(tonumber(args.a) + tonumber(args.b))
			}
		}

		location /subduction {
			internal;
			content_by_lua_block {
				local args = ngx.req.get_uri_args()
				ngx.print(tonumber(args.a) - tonumber(args.b))
			}
		}

		location /app/test {
			content_by_lua_block {
				local res1,res2 = ngx.location.capture_multi({
					{"/sum",{args={a=10,b=8}}},
					{"/subduction",{args={a=1995,b=8}}}
				})
				ngx.say("status:",res1.status,"  response:",res1.body)
				ngx.say("status:",res2.status,"  response:",res2.body)
			}
		}
		location /app/lua {
			content_by_lua_file lua/hello.lua;
		}
		location /app/mysql {
			content_by_lua_file lua/mysql.lua;
		}
	}
}
